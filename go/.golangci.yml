run:
    tests: true

linters-settings:
    gofmt:
        simplify: true
    goimports:
        local-prefixes: github.com/iotaledger
    gocyclo:
        min-complexity: 15
    govet:
        disable:
          - shadow
    misspell:
        locale: US
    staticcheck:
        checks: ["all"]
    nlreturn:
        block-size: 2
    stylecheck:
        initialisms: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]
    depguard:
        rules:
            main:
                deny:
                    - pkg: "errors"
                      desc: Should be replaced with "github.com/iotaledger/hive.go/ierrors" package
                    - pkg: "golang.org/x/xerrors"
                      desc: Should be replaced with "github.com/iotaledger/hive.go/ierrors" package
                    - pkg: "github.com/pkg/errors"
                      desc: Should be replaced with "github.com/iotaledger/hive.go/ierrors" package

linters:
    # Disable all linters.
    disable-all: true
    # Enable specific linter
    enable:
        - errcheck
        - gosimple
        - govet
        - ineffassign
        - staticcheck
        - unused
        - asasalint
        - asciicheck
        - bidichk
        - bodyclose
        #- containedctx
        #- contextcheck # this linter is buggy and renders all nolint rules useless
        - copyloopvar
        #- cyclop
        - decorder
        - depguard
        - dogsled
        - dupl
        - dupword
        - durationcheck
        - errchkjson
        - errname
        - errorlint
        - execinquery
        #- exhaustive
        #- exhaustruct
        - exportloopref
        #- forbidigo
        - forcetypeassert
        #- funlen
        #- gci
        - ginkgolinter
        - gocheckcompilerdirectives
        #- gochecknoglobals
        #- gochecknoinits
        #- gochecksumtype
        #- gocognit
        - goconst
        - gocritic
        #- gocyclo
        - godot
        - godox
        - goerr113
        - gofmt
        #- gofumpt
        - goheader
        - goimports
        #- gomnd
        #- gomoddirectives
        - gomodguard
        - goprintffuncname
        - gosec
        - gosmopolitan
        - grouper
        - importas
        - inamedparam
        #- interfacebloat
        - intrange
        #- ireturn
        #- lll
        - loggercheck
        #- maintidx
        - makezero
        - mirror
        - misspell
        - musttag
        - nakedret
        #- nestif
        - nilerr
        - nilnil
        - nlreturn
        - noctx
        - nolintlint
        #- nonamedreturns
        - nosprintfhostport
        - paralleltest
        #- perfsprint
        - prealloc
        - predeclared
        - promlinter
        - protogetter
        - reassign
        - revive
        - rowserrcheck
        - sloglint
        - spancheck
        - sqlclosecheck
        - stylecheck
        #- tagalign
        - tagliatelle
        - tenv
        - testableexamples
        - testifylint
        - testpackage
        - thelper
        - tparallel
        - unconvert
        - unparam
        - usestdlibvars
        #- varnamelen
        - wastedassign
        - whitespace
        #- wrapcheck
        #- wsl
        - zerologlint

issues:
    exclude-files:
        - ".*_test.go$"
    # Maximum issues count per one linter.
    # Set to 0 to disable.
    # Default: 50
    max-issues-per-linter: 0
    # Maximum count of issues with the same text.
    # Set to 0 to disable.
    # Default: 3
    max-same-issues: 0
    #exclude:
    #    - 'Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked' # errcheck
    #    - "err113: do not define dynamic errors, use wrapped static errors instead:" # goerr113
    #    - "type name will be used as [0-9A-Za-z_.]+ by other packages, and that stutters; consider calling this" # golint
    #    - "Potential file inclusion via variable" # gosec
    #    - "G404: Use of weak random number generator" # gosec
    #    - "Subprocess launch(ed with variable|ing should be audited)" # gosec
    #    - "Use of unsafe calls should be audited" # gosec
    #    - "G108: Profiling endpoint is automatically exposed on /debug/pprof" # gosec
    #    - "(Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)" # gosec
    #    - "G101: Potential hardcoded credentials" # gosec
    #    - "(G104|G307)" # gosec Duplicated errcheck checks.
    #    - "`[0-9A-Za-z_.]+` - `[0-9A-Za-z_.]+` always receives `[0-9A-Za-z_.]+`" # unparam
    #    - "should have comment .*or be unexported" # revive
    #    - "exported: comment on exported" # revive
    #    - "package-comments: package comment should be of the form" # revive
    #    - "blank-imports" # revive
    #    - "var-naming: don't use leading k in Go names;" #revive
    #    - 'shadow: declaration of "err"' # govet
